//Navigate to https://reactjs.org/tutorial/tutorial.html#overview   &   https://codepen.io/gaearon/pen/oWWQNa?editors=0010

// when states are changed, they are automatically passed down to their children. However, they aren't upto their parents. Parents will have to specify this, e.g. in Board comp., change "<Square />" to "<Square value={i} />" for the prop, value, to be passed down.  


////2nd child - specific to the content in one tile
// class Square extends React.Component {  
//   render() {
//     return (
//       <button 
//         className="square" 
//         onClick = {() =>
        //// {
        ////   this.state.value === null ?
        ////     this.setState({value: 'X'})
        ////   :
        ////     this.setState({value: null})
        //// }}
        // this.props.onClick()}
        //// the above tells React to set up a click event listener. When the button is clicked, React will call the onClick event handler that is defined in Square’s render() method.
      //   > 
      //   {this.props.sym}
      // </button>
//     );
//   }
// }


//No need to create Square as a comp. as it only contains a render method, so we'll change it to a function instead.
//NOTE: no arrow functions needed in a basic functions. Arrow function is only used when creating a function within a component!!! 
function Square(props) {
  return (
    <button className="square" onClick={props.onClick}>
      {props.sym}
    </button>
  );
}

//1st child - the tiles are made here 
class Board extends React.Component {
    constructor(props) {
    super(props);
    this.state = {
      squares: Array(9).fill(null), 
      // creates 3x3 tiles with null in each tile
      xIsNext: true,
    };
  }
  
  //this function writes the X or O when square is clicked
  vinuClick(i) {
    const squarezz =
          this.state.squares.slice();
    squarezz[i] = this.state.xIsNext ? 'X': 'O';
    this.setState({
      squares: squarezz,
      xIsNext : !this.state.xIsNext,    
    });
    //note that the states squares and xIsNext changes here - xIsNext loops btwn true to false when ever a square is clicked
    
    //The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified.
  }
  
  // i loops from 0 to 8 - when <button...>{this.props.sym}</button> is coded in the button of the square component, each of the tile will display numbers in order from 0 to 8
  
  // renderSquare(i) { 
  //   return <Square sym={i} />;
  // }
    
  //square comp. is passed down in here. renderSquare creates/displays the square button.
  renderSquare(i) { 
    return <Square sym = 
             {this.state.squares[i]}
             onClick={() =>
       this.vinuClick(i)
             }
            />;
  }
  
  render() {
    // const status = 'Next player: ' +
    //       (this.state.xIsNext ? 'X' : 'O');
    
    
    // const status will keep the status as constant, whereas let will declare the status as a variable!!!!
    
        const winner = calculateWinner(this.state.squares);
    
    //METHOD 1 BELOW
    //     const winner = calculateWinner(this.state.squares);
    // let status;
    // if (winner) {
    //   status = 'Winner: ' + winner;
    // } else {
    //   status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
    // }
    
    //METHOD 2, my method,  BELOW
    const status = (winner ? 'Winner ' + winner : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'));
    
    
    return (
      <div>
        <div className="status">{status}</div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

//Parent - the logic of the game is here
class Game extends React.Component {
  render() {
    return (
      <div className="game">
        <div className="game-board">
          <Board />;
        </div> 
        <div className="game-info">
          <div>{/* status */}</div>
          <ol>{/* TODO */}</ol>
        </div>
      </div>
    ); //board comp. is passed up in here
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);




function calculateWinner(squares) {
  const lines = [
    [0, 1, 2], //first row
    [3, 4, 5], //second row
    [6, 7, 8], //third row
    [0, 3, 6], //first column
    [1, 4, 7], //second column
    [2, 5, 8], //third column
    [0, 4, 8], //diagonal: topLeft to bottomRight
    [2, 4, 6], //diagonal: topRight to bottomLeft
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}